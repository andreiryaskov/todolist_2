{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","action","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","rootReducer","combineReducers","todoListId","copyState","forEach","app","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.435ea9bf.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2f0b58ae-7a8c-48df-9278-ab56fc421c58'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nexport type NullableType<T> = null | T\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as NullableType<string>\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: NullableType<string>) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType = SetAppStatusActionType\r\n    | setAppErrorActionType\r\n\r\n","import {\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setAppErrorActionType | SetAppStatusActionType>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n        id,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type changeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | setAppErrorActionType\r\n    | changeTodolistEntityStatusActionType\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    NullableType,\r\n    setAppErrorAC,\r\n    setAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusActionType\r\n    | setAppErrorActionType\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\"\r\n                    onClick={addItem}\r\n                    disabled={props.entityStatus === 'loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus?: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {NullableType, setAppErrorAC} from \"../../app/app-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useAppSelector<NullableType<string>>( (state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {useAppSelector} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useAppSelector<RequestStatusType>( (state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                { status === 'loading' && <LinearProgress color='secondary'/> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}